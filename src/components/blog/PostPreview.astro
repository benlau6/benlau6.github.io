---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getPostSortDate } from "@/data/post";
import type { HTMLTag, Polymorphic } from "astro/types";
import FormattedDate from "../FormattedDate.astro";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	post: CollectionEntry<"blog" | "projects" | "notes">;
	withDate?: boolean;
	withDesc?: boolean;
	withTags?: boolean;
	withCover?: boolean;
	enlargeHeader?: boolean;
};

const {
	as: Tag = "div",
	post,
	withDate = true,
	withDesc = false,
	withCover = false,
	withTags = false,
	enlargeHeader = false,
} = Astro.props;
const postDate = getPostSortDate(post);
---

{
	withDate && (
		<FormattedDate class="text-gray-600 dark:text-gray-400 min-w-[120px]" date={postDate} />
	)
}
<Tag class="flex flex-col gap-1">
	<div>
		{post.data.draft && <span class="text-red-500">(Draft) </span>}
		<a
			class="cactus-link"
			class:list={[{ "xl:text-2xl": enlargeHeader }]}
			data-astro-prefetch
			href={`/${post.collection}/${post.slug}/`}
		>
			{post.data.title}
		</a>
	</div>
	{withDesc && <q class="line-clamp-3 hidden italic sm:block">{post.data.description}</q>}
	{
		withTags && post.data.tags && (
			<div class="mt-1 hidden flex-wrap gap-x-2 gap-y-1 xl:flex">
				{post.data.tags.map((tag: string) => (
					<a class="cactus-link opacity-70" data-astro-prefetch href={`/tags/${tag}/`}>
						#{tag}
					</a>
				))}
			</div>
		)
	}
</Tag>
{
	withCover && post.data.coverImage && (
		<a
			data-astro-prefetch
			href={`/${post.collection}/${post.slug}/`}
			class="aspect-h-9 aspect-w-21 hidden xl:block"
		>
			<Image
				alt={post.data.coverImage.alt}
				class="object-cover"
				fetchpriority="high"
				loading="eager"
				src={post.data.coverImage.src}
			/>
		</a>
	)
}
